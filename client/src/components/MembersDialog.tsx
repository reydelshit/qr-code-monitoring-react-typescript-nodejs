'use client';

import * as React from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import axios from 'axios';
import { toast } from './ui/use-toast';

const permissions = [
  { id: 'view-attendance', label: 'View Attendance' },
  { id: 'manage-student', label: 'Manage Student' },
  { id: 'view-reports', label: 'View Reports' },
  { id: 'scan-qr-code', label: 'Scan QR Code' },
  { id: 'manage-members', label: 'Manage Members' },
];

interface AddMemberDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (values: any) => void;
  fetchMembers: () => void;
}

export function AddMemberDialog({
  open,
  onOpenChange,
  onSubmit,
  fetchMembers,
}: AddMemberDialogProps) {
  const [formData, setFormData] = React.useState({
    name: '',
    username: '',
    password: '',
    accessDuration: '',
    permissions: [] as string[],
  });
  const [errors, setErrors] = React.useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  React.useEffect(() => {
    if (formData.name) {
      const username = formData.name.toLowerCase().replace(/[^a-z0-9]/g, '');
      setFormData((prev) => ({ ...prev, username }));

      // Generate a random password
      const password = Math.random().toString(36).slice(-8);
      setFormData((prev) => ({ ...prev, password }));
    }
  }, [formData.name]);

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    if (!formData.name) newErrors.name = 'Name is required';
    if (!formData.accessDuration)
      newErrors.accessDuration = 'Access duration is required';
    if (formData.permissions.length === 0)
      newErrors.permissions = 'Select at least one permission';
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (validateForm()) {
      onSubmit(formData);
      setFormData({
        name: '',
        username: '',
        password: '',
        accessDuration: '',
        permissions: [],
      });

      try {
        const res = await axios.post(
          `${import.meta.env.VITE_SERVER_LINK}/members/create`,
          {
            ...formData,
          },

          {
            headers: {
              'Content-Type': 'application/json',
            },
          },
        );

        if (res.data.status === 'success') {
          console.log(res.data);
          onOpenChange(false);
          fetchMembers();
          toast({
            title: 'Member added successfully',
            description: 'Member has been added successfully',
          });
        }
      } catch (err) {
        console.log(err);
      }
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSelectChange = (value: string) => {
    setFormData((prev) => ({ ...prev, accessDuration: value }));
  };

  const handleCheckboxChange = (checked: boolean, id: string) => {
    setFormData((prev) => ({
      ...prev,
      permissions: checked
        ? [...prev.permissions, id]
        : prev.permissions.filter((p) => p !== id),
    }));
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Add Member</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">Name</Label>
            <Input
              id="name"
              placeholder="Enter name"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
            />
            {errors.name && (
              <p className="text-sm text-red-500">{errors.name}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="username">Username</Label>
            <Input
              id="username"
              placeholder="Autogenerated username"
              name="username"
              value={formData.username}
              readOnly
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              placeholder="Autogenerated password"
              name="password"
              value={formData.password}
              readOnly
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="accessDuration">Access Duration</Label>
            <Select
              onValueChange={handleSelectChange}
              value={formData.accessDuration}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select access duration" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="1h">1 hour</SelectItem>
                <SelectItem value="4h">4 hours</SelectItem>
                <SelectItem value="8h">8 hours</SelectItem>
                <SelectItem value="24h">24 hours</SelectItem>
              </SelectContent>
            </Select>
            {errors.accessDuration && (
              <p className="text-sm text-red-500">{errors.accessDuration}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label>Access Control</Label>
            <div className="space-y-2">
              {permissions.map((permission) => (
                <div
                  key={permission.id}
                  className="flex items-center space-x-2"
                >
                  <Checkbox
                    id={permission.id}
                    checked={formData.permissions.includes(permission.id)}
                    onCheckedChange={(checked) =>
                      handleCheckboxChange(checked as boolean, permission.id)
                    }
                  />
                  <Label htmlFor={permission.id} className="font-normal">
                    {permission.label}
                  </Label>
                </div>
              ))}
            </div>
            {errors.permissions && (
              <p className="text-sm text-red-500">{errors.permissions}</p>
            )}
          </div>

          <Button type="submit" className="w-full">
            Submit
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  );
}
